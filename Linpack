理论浮点峰值=CPU主频×CPU每个时钟周期执行浮点运算的次数×系统中CPU核心数目。

HPL.dat参数解释说明
HPLinpack benchmark input file
Innovative Computing Laboratory, University of Tennessee
HPL.out      output file name (if any)
6            device out (6=stdout,7=stderr,file)
1            # of problems sizes (N)
33600        Ns
1            # of NBs
112          NBs
0            PMAP process mapping (0=Row-,1=Column-major)
1            # of process grids (P x Q)
2            Ps
4            Qs
16.0         threshold
1            # of panel fact
1            PFACTs (0=left, 1=Crout, 2=Right)
1            # of recursive stopping criterium
4            NBMINs (>= 1)
1            # of panels in recursion
2            NDIVs
1            # of recursive panel fact.
1            RFACTs (0=left, 1=Crout, 2=Right)
1            # of broadcast
0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)
1            # of lookahead depth
1            DEPTHs (>=0)
0            SWAP (0=bin-exch,1=long,2=mix)
256          swapping threshold
1            L1 in (0=transposed,1=no-transposed) form
1            U  in (0=transposed,1=no-transposed) form
0            Equilibration (0=no,1=yes)
8            memory alignment in double (> 0)

HPL是针对现代并行计算机提出的测试方式。用户在不修改任意测试程序的基础上，
可以调节问题规模大小N(矩阵大小)、使用到的CPU数目、使用各种优化方法等来执行该测试程序，以获取最佳的性能。
HPL采用高斯消元法求解线性方程组。当求解问题规模为N时，浮点运算次数为(2/3 * N^3+2*N^2)。
因此，只要给出问题规模N，测得系统计算时间T，峰值=计算量(2/3 * N^3+2*N^2)/计算时间T，测试结果以浮点运算每秒（Flops）给出。

Ns(Problem Size): 问题规模大小值、矩阵大小
计算公式：NsxNsx8 = 系统总内存(Byte)x 80%  可得出最大的问题规模值
NBs(Number Blocks):块的个数 

linpack的执行步骤

setlargepage.sh内容如下：

首先说明一下setlargepage.sh文件里的各项内容：
mkdir -p /hugep 创建hugep目录，用来存放hugetblfile 大页文件
echo 3600 > /proc/sys/vm/nr_hugepages   创建大页数量； 3600这个大小是由系统内存大小所决定的，系统总内存是31GiB，每个HugePage大小是8MiB， 最多可创建3968个大页，考虑到其他的一些系统开销，我们选择创建3600个大页。
./setlp-9916 112 ： 是单核所申请的大页数量，由于总共我们有3600个大页，32个核心一起执行的话，每个核心最多可申请112个内存大页(3600/32约等于112)。之前32核跑不起来的原因是./set-9916后面的数字给的太大了，给到了200, 那么3600/200等于18,也就是最多只能跑18个核。   所以让所有核心都跑起来，只能降低./setlp-9916后面的数字，即单核所申请的大页数量为112; 当然比112低的数字也是可以的，但采用低于112的数字，最后的测试分数可能会降低。
接着另一个关键的文件HPL.dat

Ns（linpack测试矩阵的问题规模大小）的大小，也是跟内存相关的， 计算公式：Ns x Ns x 8 = 系统总内存(以字节为单位) * 80%；
最终在32GiB的内存上，根据上面公式计算得出，Ns的大小最大在59000左右。超过这个数字，在运行linpack的时候会提示Mem used up.....cannot allocate memory之类的错误，表示无法申请更多的内存。
Ps和Qs是测试矩阵中表示横向通信和竖向通信的大小，一般单节点的话，即单台设备，Ps要小于Qs的数据。两者相乘是总的测试核心数的大小。
Ps  4  （横向）
Qs  8 （竖向）







